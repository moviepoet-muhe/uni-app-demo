{"version":3,"file":"interceptors.js","sources":["utils/interceptors.js"],"sourcesContent":["/**\n * 对路由导航进行拦截处理\n */\n// permissionList 中保存需要鉴权的路径字符串信息\nconst permissionList = ['/pages/confirm/confirm', '/pages/mine/mine']\n\n// 待拦截的 api\nconst apis = ['navigateTo', 'switchTab', 'redirectTo', 'reLaunch', 'navigateBack']\n\napis.forEach(api => {\n\tuni.addInterceptor(api, {\n\t\t/**\n\t\t * 在跳转前，需要判断是否页面需要鉴权，如果页面需要鉴权，\n\t\t * 则判断是否有用户已登录，用户未登录，则跳转到登录页面\n\t\t */\n\t\tinvoke(arg) {\n\t\t\t// 获取跳转后的地址路径\n\t\t\tconst { url } = arg\n\t\t\t// 判断跳转的地址是否需要鉴权\n\t\t\t// 如果需要鉴权，则判断是否有用户登录的 token\n\t\t\tif (permissionList.includes(url)) {\n\t\t\t\t// 需要鉴权处理，则从本地获取登录用户的 token\n\t\t\t\tconst token = uni.getStorageSync('token')\n\t\t\t\t// 如果没有登录的 token，则跳转到登录页面\n\t\t\t\tif (!token) {\n\t\t\t\t\tuni.navigateTo({\n\t\t\t\t\t\turl: '/pages/login/login'\n\t\t\t\t\t})\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t})\n})\n"],"names":["uni"],"mappings":";;AAIA,MAAM,iBAAiB,CAAC,0BAA0B,kBAAkB;AAGpE,MAAM,OAAO,CAAC,cAAc,aAAa,cAAc,YAAY,cAAc;AAEjF,KAAK,QAAQ,SAAO;AACnBA,gBAAG,MAAC,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKvB,OAAO,KAAK;AAEX,YAAM,EAAE,IAAG,IAAK;AAGhB,UAAI,eAAe,SAAS,GAAG,GAAG;AAEjC,cAAM,QAAQA,cAAAA,MAAI,eAAe,OAAO;AAExC,YAAI,CAAC,OAAO;AACXA,wBAAAA,MAAI,WAAW;AAAA,YACd,KAAK;AAAA,UACX,CAAM;AACD,iBAAO;AAAA,QACP;AAAA,MACD;AAAA,IACD;AAAA,EACH,CAAE;AACF,CAAC;"}